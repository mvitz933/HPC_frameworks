#include <cmath>
#include <stdexcept>
#include <iostream>
#include <vector>
#include <openacc.h>

// LU Decomposition with OpenACC and Pivoting
void lu_decomposition(const double* A, double* L, double* U, double* P, int n) {
    // Variables for error checking
    bool is_error = false;
    int error_index = -1;

    // Initialize matrices
    #pragma acc parallel loop collapse(2)
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            L[i * n + j] = 0.0;
            U[i * n + j] = A[i * n + j];
            P[i * n + j] = (i == j) ? 1.0 : 0.0; // Identity matrix for P
        }
    }

    // Perform LU decomposition with pivoting
    for (int k = 0; k < n; ++k) {
        // Step 1: Find pivot row (serial operation)
        double max_val = std::abs(U[k * n + k]);
        int pivot_row = k;
        for (int i = k + 1; i < n; ++i) {
            double abs_val = std::abs(U[i * n + k]);
            if (abs_val > max_val) {
                max_val = abs_val;
                pivot_row = i;
            }
        }

        // Step 2: Swap rows in U and P
        if (pivot_row != k) {
            #pragma acc parallel loop
            for (int j = 0; j < n; ++j) {
                std::swap(U[k * n + j], U[pivot_row * n + j]);
                std::swap(P[k * n + j], P[pivot_row * n + j]);
                if (k > 0) {
                    std::swap(L[k * n + j], L[pivot_row * n + j]);
                }
            }
        }

        // Step 3: Check for singular matrix
        if (U[k * n + k] == 0.0) {
            is_error = true;
            error_index = k * n + k;
            break;
        }

        // Step 4: Compute L and update U
        // Compute the lower triangular matrix L
        #pragma acc parallel loop present(U, L)
        for (int i = k + 1; i < n; ++i) {
            double factor = U[i * n + k] / U[k * n + k];
            L[i * n + k] = factor;

            // Update U matrix
            #pragma acc loop
            for (int j = k; j < n; ++j) {
                U[i * n + j] -= factor * U[k * n + j];
            }
        }

        // Set diagonal of L to 1
        L[k * n + k] = 1.0;
        #pragma create(is_error)
        // Step 5: Check for NaN or errors
        #pragma acc parallel loop reduction(||:is_error) create(is_error)
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (std::isnan(U[i * n + j]) || std::isnan(L[i * n + j])) {
                    is_error = true;
                    error_index=i * n + j;
                }
            }
        }
    }

    // Handle errors
    if (is_error) {
        throw std::runtime_error("LU decomposition failed. Matrix may not be positive definite or is singular: " + std::to_string(error_index));
    }
}

