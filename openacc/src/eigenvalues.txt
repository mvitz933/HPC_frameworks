#include "eigenvalues.hpp"
#include "qr.hpp"
#include <vector>
#include <cmath>
#include <stdexcept>
#include <iostream>
#include <openacc.h>


template <int M, int N>
std::vector<double> calculate_all_eigenvalues(const double A[M][N], int max_iters, double tol){    
    std::size_t n = A.size();
    if (n == 0 || A[0].size() != n) {
        throw std::invalid_argument("Matrix must be square and non-empty.");
    }

    // Copy matrix A for iteration
    std::vector<std::vector<double>> B = A;

    // Allocate device memory for B
    #pragma acc data copy(B[0:n][0:n])
    {
        for (int iter = 0; iter < max_iters; ++iter) {
            std::vector<std::vector<double>> Q(n, std::vector<double>(n, 0.0));
            std::vector<std::vector<double>> R(n, std::vector<double>(n, 0.0));

            // Perform QR decomposition (assume qr_decomposition is GPU-compatible)
            constexpr int M =3;
            constexpr int N =3;
            qr_decomposition<M, N>(A, Q, R);

            // Compute B = R * Q
            std::vector<std::vector<double>> B_next(n, std::vector<double>(n, 0.0));
            #pragma acc parallel loop collapse(2) present(B, B_next, R, Q)
            for (std::size_t i = 0; i < n; ++i) {
                for (std::size_t j = 0; j < n; ++j) {
                    double sum = 0.0;
                    #pragma acc loop reduction(+:sum)
                    for (std::size_t k = 0; k < n; ++k) {
                        sum += R[i][k] * Q[k][j];
                    }
                    B_next[i][j] = sum;
                }
            }

            // Check for convergence
            double diff = 0.0;
            #pragma acc parallel loop collapse(2) reduction(+:diff) present(B, B_next)
            for (std::size_t i = 0; i < n; ++i) {
                for (std::size_t j = 0; j < n; ++j) {
                    diff += std::abs(B[i][j] - B_next[i][j]);
                }
            }

            // Update B
            #pragma acc parallel loop collapse(2) present(B, B_next)
            for (std::size_t i = 0; i < n; ++i) {
                for (std::size_t j = 0; j < n; ++j) {
                    B[i][j] = B_next[i][j];
                }
            }

            if (diff < tol) break;
        }

        // Extract eigenvalues from the diagonal of B
        std::vector<double> eigenvalues(n);
        #pragma acc parallel loop copyout(eigenvalues[0:n]) present(B)
        for (std::size_t i = 0; i < n; ++i) {
            eigenvalues[i] = B[i][i];
        }

        return eigenvalues;
    }
}
