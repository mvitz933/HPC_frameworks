#include "solve.hpp"
#include "lu.hpp"
#include <stdexcept>
#include <cmath>
#include <vector>
#include <openacc.h>

// Solve Ax = b using LU decomposition
std::vector<double> solve_linear_system_with_lu(const std::vector<std::vector<double>>& A,
                                                const std::vector<double>& b) {
    std::size_t n = A.size();

    // Perform LU decomposition
    std::vector<std::vector<double>> L, U;
    lu_decomposition(A, L, U);  // Assuming lu_decomposition is GPU-compatible or hybrid.

    // Forward substitution: Solve Ly = b
    std::vector<double> y(n, 0.0);
    #pragma acc data copyin(L[0:n][0:n], b[0:n]) copyout(y[0:n])
    {
        for (std::size_t i = 0; i < n; ++i) {
            double sum = 0.0;
            #pragma acc parallel loop reduction(+:sum) present(L, y)
            for (std::size_t j = 0; j < i; ++j) {
                sum += L[i][j] * y[j];
            }
            y[i] = b[i] - sum;
        }
    }

    // Back substitution: Solve Ux = y
    std::vector<double> x(n, 0.0);
    #pragma acc data copyin(U[0:n][0:n], y[0:n]) copyout(x[0:n])
    {
        for (int i = n - 1; i >= 0; --i) {
            double sum = 0.0;
            #pragma acc parallel loop reduction(+:sum) present(U, x)
            for (std::size_t j = i + 1; j < n; ++j) {
                sum += U[i][j] * x[j];
            }
            x[i] = (y[i] - sum) / U[i][i];
        }
    }

    return x;
}
